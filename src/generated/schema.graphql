### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type Account {
  createdAt: DateTime!
  email: String!
  id: ID!
  lastLogin: DateTime
  password: String!
  updatedAt: DateTime!
  username: String!
}

type AccountConnection {
  aggregate: AggregateAccount!
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
}

input AccountCreateInput {
  email: String!
  id: ID
  lastLogin: DateTime
  password: String!
  username: String!
}

type AccountEdge {
  cursor: String!
  node: Account!
}

enum AccountOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  lastLogin_ASC
  lastLogin_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
}

input AccountUpdateInput {
  email: String
  lastLogin: DateTime
  password: String
  username: String
}

input AccountUpdateManyMutationInput {
  email: String
  lastLogin: DateTime
  password: String
  username: String
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  lastLogin: DateTime
  lastLogin_gt: DateTime
  lastLogin_gte: DateTime
  lastLogin_in: [DateTime!]
  lastLogin_lt: DateTime
  lastLogin_lte: DateTime
  lastLogin_not: DateTime
  lastLogin_not_in: [DateTime!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  username: String
  username_contains: String
  username_ends_with: String
  username_gt: String
  username_gte: String
  username_in: [String!]
  username_lt: String
  username_lte: String
  username_not: String
  username_not_contains: String
  username_not_ends_with: String
  username_not_in: [String!]
  username_not_starts_with: String
  username_starts_with: String
}

input AccountWhereUniqueInput {
  email: String
  id: ID
  username: String
}

type AggregateAccount {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateManyAccounts(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): BatchPayload!
  upsertAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(after: String, before: String, first: Int, last: Int, orderBy: AccountOrderByInput, skip: Int, where: AccountWhereInput): [Account!]!
  accountsConnection(after: String, before: String, first: Int, last: Int, orderBy: AccountOrderByInput, skip: Int, where: AccountWhereInput): AccountConnection!
}
